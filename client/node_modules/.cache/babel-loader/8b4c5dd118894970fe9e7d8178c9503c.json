{"ast":null,"code":"import Web3 from 'web3';\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const web3 = new Web3(window.ethereum);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        }); //return accounts\n        // Accounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(\"User denied account access. \" + error);\n        console.log(\"User denied account access. \" + error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      } // Fallback to localhost; use dev console port by default...\n      else {\n          const provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n          const web3 = new Web3(provider);\n          console.log(\"No web3 instance injected, using Local web3.\");\n          resolve(web3);\n        }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/Users/guneet/Downloads/Fall2022/myproject/Marketplace/client/src/utils/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","request","method","error","console","log","provider","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAa,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAChC;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAb;;AAEA,UAAI;AACF;AACA,cAAMF,MAAM,CAACE,QAAP,CAAgBE,OAAhB,CAAwB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAAxB,CAAN,CAFE,CAEgE;AAClE;;AACAP,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OALD,CAKE,OAAOG,KAAP,EAAc;AACdP,QAAAA,MAAM,CAAC,iCAAiCO,KAAlC,CAAN;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAiCF,KAA7C;AACD;AACF,KAZD,CAaA;AAbA,SAcK,IAAIN,MAAM,CAACG,IAAX,EAAiB;AACpB;AACA,cAAMA,IAAI,GAAGH,MAAM,CAACG,IAApB;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAV,QAAAA,OAAO,CAACK,IAAD,CAAP;AACD,OALI,CAML;AANK,WAOA;AACH,gBAAMM,QAAQ,GAAG,IAAId,IAAI,CAACe,SAAL,CAAeC,YAAnB,CACf,uBADe,CAAjB;AAGA,gBAAMR,IAAI,GAAG,IAAIR,IAAJ,CAASc,QAAT,CAAb;AACAF,UAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAV,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD;AACF,GA/BD;AAgCD,CAlCD,CADF;;AAqCA,eAAeP,OAAf","sourcesContent":["import Web3 from 'web3';\n\nconst getWeb3 = () =>\n  new Promise ((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        \n        try {\n          // Request account access if needed\n          await window.ethereum.request({ method: 'eth_requestAccounts' }); //return accounts\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(\"User denied account access. \" + error);\n          console.log(\"User denied account access. \" + error)\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;"]},"metadata":{},"sourceType":"module"}